import { TripData, GeminiImageRequest } from '../types/nft';

class GeminiImageService {
  private apiKey: string;
  private baseUrl = 'https://generativelanguage.googleapis.com/v1beta';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  /**
   * Gera um prompt criativo baseado nos dados da viagem
   */
  private generateTripPrompt(tripData: TripData): string {
    const duration = this.calculateTripDuration(tripData.startDate, tripData.endDate);
    const participantCount = tripData.participants.length;
    
    const basePrompt = `Create a beautiful, commemorative travel illustration for "${tripData.name}" trip to ${tripData.destination}. `;
    
    const details = [
      `${participantCount} friends traveled together`,
      `${duration} days of adventure`,
      `Total shared expenses: ${tripData.currency} ${tripData.totalExpenses.toFixed(2)}`,
      tripData.highlights.length > 0 ? `Key experiences: ${tripData.highlights.join(', ')}` : ''
    ].filter(Boolean).join(', ');

    const styleGuide = `Style: Modern, warm, friendly illustration with travel elements like luggage, landmarks, or maps. Include subtle blockchain/crypto elements like geometric patterns or stellar symbols. Use vibrant but harmonious colors. The image should feel like a special commemorative certificate.`;

    return `${basePrompt}${details}. ${styleGuide}`;
  }

  private calculateTripDuration(startDate: string, endDate: string): number {
    const start = new Date(startDate);
    const end = new Date(endDate);
    return Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
  }

  /**
   * Gera imagem usando Gemini API
   */
  async generateTripImage(tripData: TripData, options?: Partial<GeminiImageRequest>): Promise<string> {
    try {
      const prompt = this.generateTripPrompt(tripData);
      
      const requestBody = {
        contents: [{
          parts: [{
            text: `Generate an image: ${prompt}`
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          candidateCount: 1,
          maxOutputTokens: 1024,
        }
      };

      const response = await fetch(
        `${this.baseUrl}/models/gemini-pro-vision:generateContent?key=${this.apiKey}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody)
        }
      );

      if (!response.ok) {
        throw new Error(`Gemini API error: ${response.statusText}`);
      }

      const data = await response.json();
      
      // Note: Gemini API structure may vary - adjust based on actual response
      // This is a placeholder for the actual image URL extraction
      const imageUrl = data.candidates?.[0]?.content?.parts?.[0]?.text;
      
      if (!imageUrl) {
        throw new Error('No image generated by Gemini');
      }

      return imageUrl;
    } catch (error) {
      console.error('Error generating image with Gemini:', error);
      throw error;
    }
  }

  /**
   * Alternativa usando um serviço de placeholder enquanto configura Gemini
   */
  async generatePlaceholderImage(tripData: TripData): Promise<string> {
    // Gera uma imagem placeholder estilizada baseada nos dados
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (!ctx) throw new Error('Canvas not supported');
    
    canvas.width = 800;
    canvas.height = 600;
    
    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Trip info overlay
    ctx.fillStyle = 'white';
    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(tripData.name, canvas.width / 2, 100);
    
    ctx.font = '24px Arial';
    ctx.fillText(tripData.destination, canvas.width / 2, 150);
    
    ctx.font = '18px Arial';
    ctx.fillText(`${tripData.participants.length} travelers`, canvas.width / 2, 200);
    ctx.fillText(`${tripData.currency} ${tripData.totalExpenses.toFixed(2)} shared`, canvas.width / 2, 230);
    
    // Add Stellar symbol
    ctx.font = '48px Arial';
    ctx.fillText('✦', canvas.width / 2, 350);
    
    ctx.font = '14px Arial';
    ctx.fillText('NFT Receipt - Powered by Stellar', canvas.width / 2, 500);
    
    return canvas.toDataURL('image/png');
  }
}

export default GeminiImageService;